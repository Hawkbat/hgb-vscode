/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A file containing settings for a Game Boy development project
 */
export interface GameBoyProject {
  /**
   * Settings for the assembly phase
   */
  assembler?: {
    /**
     * An array of paths or glob patterns specifying the source files to assemble. If omitted, defaults to [ 'src/*.{asm,s,z80,gbz80,sm83,hgb}' ].
     */
    sourcePaths?: string[];
    /**
     * An array of paths or glob patterns specifying the folders to search in when including other files from source files. If omitted, defaults to [ 'inc/** /' ].
     */
    includePaths?: string[];
    /**
     * Whether to output Make-style dependfiles. If omitted, defaults to false if `dependPath` is also omitted, otherwise true.
     */
    outputDependFiles?: boolean;
    /**
     * A path to the directory where depend files will be written if `outputDependFiles` is true or omitted. If omitted, defaults to 'deps/'.
     */
    dependPath?: string;
    /**
     * Whether to output object files. If omitted, defaults to true.
     */
    outputObjectFiles?: boolean;
    /**
     * A path to the directory where object files will be written if `outputObjectFiles` is true or omitted. If omitted, defaults to 'obj/'.
     */
    objectPath?: string;
    /**
     * The level of logging emitted to the console by the assembler. If omitted, defaults to 'info'.
     */
    logLevel?: "off" | "fatal" | "error" | "warn" | "info" | "debug" | "trace" | "all";
    /**
     * Settings for the assembler
     */
    settings?: {
      /**
       * The value used to fill empty spaces within sections. If omitted, defaults to 0.
       */
      padding?: number;
      /**
       * Whether to export all labels in a source file or use explicit export syntax. If omitted, defaults to false.
       */
      exportAllLabels?: boolean;
      /**
       * Whether to automatically insert a `nop` after every `halt` instruction. If omitted, defaults to true.
       */
      nopAfterHalt?: boolean;
      /**
       * Whether to automatically replace the two-byte instruction `ld [$FF00+n8], a` with the one-byte `ldh [n8], a` instruction. If omitted, defaults to true.
       */
      optimizeLd?: boolean;
      /**
       * Specifies a string equate to implicitly define before compiling. If omitted, no equate is defined.
       */
      debugDefineName?: string;
      /**
       * Specifies the value of the string equate named by `debugDefineName`. If omitted, defaults to '1'.
       */
      debugDefineValue?: string;
    };
  };
  /**
   * Settings for the linking phase
   */
  linker?: {
    /**
     * An array of paths or glob patterns specifying the object files to link. If omitted, defaults to [ 'obj/** /*.o' ].
     */
    objectPaths?: string[];
    /**
     * Whether to emit the resulting ROM file. If omitted, defaults to true.
     */
    outputRomFile?: boolean;
    /**
     * The path where the resulting ROM file will be written if `outputRomFile` is true or omitted. If omitted, defaults to 'bin/rom.gb'.
     */
    romPath?: string;
    /**
     * Whether to emit a map file with section and label locations. If omitted, defaults to false if `mapPath` is also omitted, otherwise true.
     */
    outputMapFile?: boolean;
    /**
     * The path a map file will be written to if `outputMapFile` is true or omitted. If omitted, defaults to `romPath` with the extension '.map'.
     */
    mapPath?: string;
    /**
     * Whether to emit a symbol file with symbol locations. If omitted, defaults to false if `symPath` is also omitted, otherwise true.
     */
    outputSymFile?: boolean;
    /**
     * The path a symbol file will be written to if `outputSymFile` is true or omitted. If omitted, defaults to `romPath` with the extension '.sym'.
     */
    symPath?: string;
    /**
     * Whether to overlay linked sections on top of another ROM file. If omitted, defaults to false if `overlayPath` is also omitted, otherwise true.
     */
    useOverlay?: boolean;
    /**
     * The path to a ROM file that linked sections will be applied to if `useOverlay` is true or omitted. If omitted, defaults to `romPath` with the extension '.rom'.
     */
    overlayPath?: string;
    /**
     * Whether to use a linker script to place sections. If omitted, defaults to false if `linkerScriptPath` is also omitted, otherwise true.
     */
    useLinkerScript?: boolean;
    /**
     * The path to a linker script that defines where sections should be placed. If omitted, defaults to `romPath` with the extension '.link'.
     */
    linkerScriptPath?: string;
    /**
     * The level of logging emitted to the console by the linker. If omitted, defaults to 'info'.
     */
    logLevel?: "off" | "fatal" | "error" | "warn" | "info" | "debug" | "trace" | "all";
    /**
     * Settings for the linker
     */
    settings?: {
      /**
       * The value used to fill empty spaces between sections. If omitted, defaults to 0.
       */
      padding?: number;
      /**
       * Whether to disable WRAMX sections and extend the WRAM0 section to the full 8KB. If omitted, defaults to false.
       */
      disableWramBanks?: boolean;
      /**
       * Whether to disable ROMX sections and extend the ROM0 section to the full 32KB. If omitted, defaults to false.
       */
      disableRomBanks?: boolean;
      /**
       * Whether to disable banked VRAM sections. If omitted, defaults to false.
       */
      disableVramBanks?: boolean;
    };
  };
  /**
   * Settings for the fixing phase
   */
  fixer?: {
    /**
     * Whether to emit the resulting ROM file. If omitted, defaults to true.
     */
    outputRomFile?: boolean;
    /**
     * The path to the ROM file to fix. If omitted, defaults to 'bin/rom.gb'.
     */
    romPath?: string;
    /**
     * The path where the resulting ROM file will be written. If omitted, defaults to `romPath`.
     */
    outputPath?: string;
    /**
     * The level of logging emitted to the console by the fixer. If omitted, defaults to 'info'.
     */
    logLevel?: "off" | "fatal" | "error" | "warn" | "info" | "debug" | "trace" | "all";
    /**
     * Settings for the fixer
     */
    settings?: {
      /**
       * The value used to fill empty spaces at the end of the ROM. If omitted, no padding is done.
       */
      padding?: number;
      /**
       * The header value to write for CGB compatibility. If omitted the ROM is left unchanged.
       */
      cgbCompatibility?: "cgb" | "dmg" | "both";
      /**
       * Whether to set the header flag for SGB compatibility to true or false. If omitted the ROM is left unchanged.
       */
      sgbCompatible?: boolean;
      /**
       * The operation to apply for the Nintendo logo. If omitted the ROM is left unchanged.
       */
      nintendoLogo?: "fix" | "trash";
      /**
       * The operation to apply for the header checksum. If omitted the ROM is left unchanged.
       */
      headerChecksum?: "fix" | "trash";
      /**
       * The operation to apply for the global checksum. If omitted the ROM is left unchanged.
       */
      globalChecksum?: "fix" | "trash";
      /**
       * Whether to set the header flag for region to Japanese or non-Japanese. If omitted the ROM is left unchanged.
       */
      japanese?: boolean;
      /**
       * A two-character string designating the publisher. If omitted the ROM is left unchanged.
       */
      licensee?: string;
      /**
       * A byte designating the publisher or 'use-licensee' to use the other licensee field, which is needed for SGB functionality. If omitted the ROM is left unchanged.
       */
      licenseeCode?: number | ("none" | "use-licensee");
      /**
       * The header value to write for memory controller type, or a known MBC type. If omitted the ROM is left unchanged.
       */
      mbcType?:
        | number
        | (
            | "ROM ONLY"
            | "MBC5"
            | "MBC1"
            | "MBC5 + RAM"
            | "MBC1 + RAM"
            | "MBC5 + RAM + BATTERY"
            | "MBC1 + RAM + BATTERY"
            | "MBC5 + RUMBLE"
            | "MBC2"
            | "MBC5 + RUMBLE + RAM"
            | "MBC2 + BATTERY"
            | "MBC5 + RUMBLE + RAM + BATTERY"
            | "ROM + RAM"
            | "MBC6"
            | "ROM + RAM + BATTERY"
            | "MBC7 + SENSOR + RUMBLE + RAM + BATTERY"
            | "MMM01"
            | "MMM01 + RAM"
            | "MMM01 + RAM + BATTERY"
            | "MBC3 + TIMER + BATTERY"
            | "MBC3 + TIMER + RAM + BATTERY"
            | "POCKET CAMERA"
            | "MBC3"
            | "BANDAI TAMA5"
            | "MBC3 + RAM"
            | "HuC3"
            | "MBC3 + RAM + BATTERY"
            | "HuC1 + RAM + BATTERY");
      /**
       * The header value to write for ROM size, a known ROM size, or 'auto' to determine value automatically. If omitted the ROM is left unchanged.
       */
      romSize?:
        | number
        | (
            | "auto"
            | "32KB"
            | "64KB"
            | "128KB"
            | "256KB"
            | "512KB"
            | "1MB"
            | "2MB"
            | "4MB"
            | "8MB"
            | "1.1MB"
            | "1.2MB"
            | "1.5MB");
      /**
       * The header value to write for RAM size or a known RAM size. If omitted the ROM is left unchanged.
       */
      ramSize?: number | ("none" | "2KB" | "8KB" | "32KB" | "128KB" | "64KB");
      /**
       * The four-character unique value to write for game id. If omitted the ROM is left unchanged.
       */
      gameId?: string;
      /**
       * The eleven- or fifteen-character value to write for game title. If omitted the ROM is left unchanged.
       */
      gameTitle?: string;
      /**
       * The byte to write for game version number. If omitted the ROM is left unchanged.
       */
      gameVersion?: number;
    };
  };
  /**
   * Settings for code formatting
   */
  formatter?: {
    /**
     * Settings for the formatter
     */
    settings?: {
      /**
       * Whether to use spaces instead of tabs to indent. If omitted, defaults to true.
       */
      useSpaces?: boolean;
      /**
       * The number of characters to indent. If omitted, defaults to 4.
       */
      tabSize?: number;
      /**
       * How keywords (INCLUDE, SECTION, IF, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      keywordCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How opcodes (LD, ADD, JMP, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      opcodeCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How pseudo-opcodes (DS, DB, RW, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      pseudoOpCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How condition codes (C, NC, Z, NZ) should be capitalized. If omitted, defaults to 'preserve'.
       */
      conditionCodeCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How registers (A, B, HL, SP, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      registerCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How functions (STRCAT, MUL, HIGH, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      functionCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How memory regions (ROM0, WRAMX, HRAM, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      regionCase?: "uppercase" | "lowercase" | "preserve";
      /**
       * How letters in hex number literals ($FFFF, $12E4, $D3, etc.) should be capitalized. If omitted, defaults to 'preserve'.
       */
      hexLetterCase?: "uppercase" | "lowercase" | "preserve";
    };
  };
  /**
   * Settings for code analysis
   */
  analyzer?: {
    /**
     * Settings for the code analyzer
     */
    settings?: {
      /**
       * Where the sizes of sections should be displayed.
       */
      sectionSizes?: "codelens" | "hover" | "all" | "none";
      /**
       * Where the offsets of global labels (relative to their section) should be displayed.
       */
      globalLabelOffsets?: "codelens" | "hover" | "all" | "none";
      /**
       * Where the sizes of global labels (from definition until the next global label or end of section) should be displayed.
       */
      globalLabelSizes?: "codelens" | "hover" | "all" | "none";
      /**
       * Where the offsets of local labels (relative to their section) should be displayed.
       */
      localLabelOffsets?: "codelens" | "hover" | "all" | "none";
      /**
       * Where the sizes of local labels (from definition until the next global label, local label, or end of section) should be displayed.
       */
      localLabelSizes?: "codelens" | "hover" | "all" | "none";
    };
  };
  /**
   * Settings for auto-completion
   */
  autoCompleter?: {
    /**
     * Settings for the auto-completer
     */
    settings?: {
      /**
       * Whether to include keywords in the auto-completion list. If omitted, defaults to true.
       */
      keywords?: boolean;
      /**
       * Whether to include instruction snippets in the auto-completion list. If omitted, defaults to true.
       */
      instructions?: boolean;
      /**
       * Whether to include functions in the auto-completion list. If omitted, defaults to true.
       */
      functions?: boolean;
      /**
       * Whether to include memory regions in the auto-completion list. If omitted, defaults to true.
       */
      regions?: boolean;
      /**
       * Whether to include predefined equates in the auto-completion list. If omitted, defaults to true.
       */
      predefines?: boolean;
      /**
       * Whether to include defined number equates in the auto-completion list. If omitted, defaults to true.
       */
      numberEquates?: boolean;
      /**
       * Whether to include defined string equates in the auto-completion list. If omitted, defaults to true.
       */
      stringEquates?: boolean;
      /**
       * Whether to include defined sets in the auto-completion list. If omitted, defaults to true.
       */
      sets?: boolean;
      /**
       * Whether to include defined labels in the auto-completion list. If omitted, defaults to true.
       */
      labels?: boolean;
      /**
       * Whether to include defined macros in the auto-completion list. If omitted, defaults to true.
       */
      macros?: boolean;
    };
  };
  /**
   * Settings for emulation
   */
  emulator?: {
    /**
     * The path to the emulator executable.
     */
    path?: string;
  };
}
