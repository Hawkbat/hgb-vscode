{
    "$schema": "http://json-schema.org/draft-04/schema",
    "title": "Game Boy Project",
    "description": "A file containing settings for a Game Boy development project",
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "assembler": {
            "description": "Settings for the assembly phase",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "sourcePaths": {
                    "description": "An array of paths or glob patterns specifying the source files to assemble. If omitted, defaults to [ './src/**/*.{asm,s,z80,gbz80,sm83,hgb}' ].",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "./src/**/*.{asm,s,z80,gbz80,sm83,hgb}"
                    ]
                },
                "includePaths": {
                    "description": "An array of paths or glob patterns specifying the folders to search in when including other files from source files. If omitted, defaults to [ './inc/**/' ].",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "./inc/**/"
                    ]
                },
                "outputDependFiles": {
                    "description": "Whether to output Make-style dependfiles. If omitted, defaults to false if `dependPath` is also omitted, otherwise true.",
                    "type": "boolean",
                    "default": false
                },
                "dependPath": {
                    "description": "A path to the directory where depend files will be written if `outputDependFiles` is true or omitted. If omitted, defaults to './deps/'.",
                    "type": "string"
                },
                "outputObjectFiles": {
                    "description": "Whether to output object files. If omitted, defaults to true.",
                    "type": "boolean",
                    "default": true
                },
                "objectPath": {
                    "description": "A path to the directory where object files will be written if `outputObjectFiles` is true or omitted. If omitted, defaults to './obj/'.",
                    "type": "string"
                },
                "logLevel": {
                    "description": "The level of logging emitted to the console by the assembler. If omitted, defaults to 'info'.",
                    "type": "string",
                    "enum": [
                        "off",
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace",
                        "all"
                    ],
                    "default": "info"
                },
                "settings": {
                    "description": "Settings for the assembler",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "padding": {
                            "description": "The value used to fill empty spaces within sections. If omitted, defaults to 0.",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255,
                            "default": 0
                        },
                        "exportAllLabels": {
                            "description": "Whether to export all labels in a source file or use explicit export syntax. If omitted, defaults to false.",
                            "type": "boolean",
                            "default": false
                        },
                        "nopAfterHalt": {
                            "description": "Whether to automatically insert a `nop` after every `halt` instruction. If omitted, defaults to true.",
                            "type": "boolean",
                            "default": true
                        },
                        "optimizeLd": {
                            "description": "Whether to automatically replace the two-byte instruction `ld [$FF00+n8], a` with the one-byte `ldh [n8], a` instruction. If omitted, defaults to true.",
                            "type": "boolean",
                            "default": true
                        },
                        "debugDefineName": {
                            "description": "Specifies a string equate to implicitly define before compiling. If omitted, no equate is defined.",
                            "type": "string"
                        },
                        "debugDefineValue": {
                            "description": "Specifies the value of the string equate named by `debugDefineName`. If omitted, defaults to '1'.",
                            "type": "string",
                            "default": "1"
                        }
                    }
                }
            }
        },
        "linker": {
            "description": "Settings for the linking phase",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "objectPaths": {
                    "description": "An array of paths or glob patterns specifying the object files to link. If omitted, defaults to [ './obj/**/*.o' ].",
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "outputRomFile": {
                    "description": "Whether to emit the resulting ROM file. If omitted, defaults to true.",
                    "type": "boolean",
                    "default": true
                },
                "romPath": {
                    "description": "The path where the resulting ROM file will be written if `outputRomFile` is true or omitted. If omitted, defaults to 'bin/rom.gb'.",
                    "type": "string"
                },
                "outputMapFile": {
                    "description": "Whether to emit a map file with section and label locations. If omitted, defaults to false if `mapPath` is also omitted, otherwise true.",
                    "type": "boolean",
                    "default": false
                },
                "mapPath": {
                    "description": "The path a map file will be written to if `outputMapFile` is true or omitted. If omitted, defaults to `romPath` with the extension '.map'.",
                    "type": "string"
                },
                "outputSymFile": {
                    "description": "Whether to emit a symbol file with symbol locations. If omitted, defaults to false if `symPath` is also omitted, otherwise true.",
                    "type": "boolean",
                    "default": false
                },
                "symPath": {
                    "description": "The path a symbol file will be written to if `outputSymFile` is true or omitted. If omitted, defaults to `romPath` with the extension '.sym'.",
                    "type": "string"
                },
                "useOverlay": {
                    "description": "Whether to overlay linked sections on top of another ROM file. If omitted, defaults to false if `overlayPath` is also omitted, otherwise true.",
                    "type": "boolean",
                    "default": false
                },
                "overlayPath": {
                    "description": "The path to a ROM file that linked sections will be applied to if `useOverlay` is true or omitted. If omitted, defaults to `romPath` with the extension '.rom'.",
                    "type": "string"
                },
                "useLinkerScript": {
                    "description": "Whether to use a linker script to place sections. If omitted, defaults to false if `linkerScriptPath` is also omitted, otherwise true.",
                    "type": "boolean",
                    "default": false
                },
                "linkerScriptPath": {
                    "description": "The path to a linker script that defines where sections should be placed. If omitted, defaults to `romPath` with the extension '.link'.",
                    "type": "string"
                },
                "logLevel": {
                    "description": "The level of logging emitted to the console by the linker. If omitted, defaults to 'info'.",
                    "type": "string",
                    "enum": [
                        "off",
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace",
                        "all"
                    ],
                    "default": "info"
                },
                "settings": {
                    "description": "Settings for the linker",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "padding": {
                            "description": "The value used to fill empty spaces between sections. If omitted, defaults to 0.",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255,
                            "default": 0
                        },
                        "disableWramBanks": {
                            "description": "Whether to disable WRAMX sections and extend the WRAM0 section to the full 8KB. If omitted, defaults to false.",
                            "type": "boolean",
                            "default": false
                        },
                        "disableRomBanks": {
                            "description": "Whether to disable ROMX sections and extend the ROM0 section to the full 32KB. If omitted, defaults to false.",
                            "type": "boolean",
                            "default": false
                        },
                        "disableVramBanks": {
                            "description": "Whether to disable banked VRAM sections. If omitted, defaults to false.",
                            "type": "boolean",
                            "default": false
                        }
                    }
                }
            }
        },
        "fixer": {
            "description": "Settings for the fixing phase",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "outputRomFile": {
                    "description": "Whether to emit the resulting ROM file. If omitted, defaults to true.",
                    "type": "boolean",
                    "default": true
                },
                "romPath": {
                    "description": "The path to the ROM file to fix. If omitted, defaults to 'bin/rom.gb'.",
                    "type": "string"
                },
                "outputPath": {
                    "description": "The path where the resulting ROM file will be written. If omitted, defaults to `romPath`.",
                    "type": "string"
                },
                "logLevel": {
                    "description": "The level of logging emitted to the console by the fixer. If omitted, defaults to 'info'.",
                    "type": "string",
                    "enum": [
                        "off",
                        "fatal",
                        "error",
                        "warn",
                        "info",
                        "debug",
                        "trace",
                        "all"
                    ],
                    "default": "info"
                },
                "settings": {
                    "description": "Settings for the fixer",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "padding": {
                            "description": "The value used to fill empty spaces at the end of the ROM. If omitted, defaults to 0.",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                        },
                        "cgbCompatibility": {
                            "description": "The header value to write for CGB compatibility. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "enum": [
                                "cgb",
                                "dmg",
                                "both"
                            ]
                        },
                        "sgbCompatible": {
                            "description": "Whether to set the header flag for SGB compatibility to true or false. If omitted the ROM is left unchanged.",
                            "type": "boolean"
                        },
                        "nintendoLogo": {
                            "description": "The operation to apply for the Nintendo logo. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "enum": [
                                "fix",
                                "trash"
                            ]
                        },
                        "headerChecksum": {
                            "description": "The operation to apply for the header checksum. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "enum": [
                                "fix",
                                "trash"
                            ]
                        },
                        "globalChecksum": {
                            "description": "The operation to apply for the global checksum. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "enum": [
                                "fix",
                                "trash"
                            ]
                        },
                        "japanese": {
                            "description": "Whether to set the header flag for region to Japanese or non-Japanese. If omitted the ROM is left unchanged.",
                            "type": "boolean"
                        },
                        "licensee": {
                            "description": "A two-character string designating the publishere. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "maxLength": 2
                        },
                        "licenseeCode": {
                            "description": "A byte designating the publisher or 'use-licensee' to use the other licensee field, which is needed for SGB functionality. If omitted the ROM is left unchanged.",
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "none",
                                        "use-licensee"
                                    ]
                                }
                            ]
                        },
                        "mbcType": {
                            "description": "The header value to write for memory controller type, or a known MBC type. If omitted the ROM is left unchanged.",
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "ROM ONLY",
                                        "MBC5",
                                        "MBC1",
                                        "MBC5 + RAM",
                                        "MBC1 + RAM",
                                        "MBC5 + RAM + BATTERY",
                                        "MBC1 + RAM + BATTERY",
                                        "MBC5 + RUMBLE",
                                        "MBC2",
                                        "MBC5 + RUMBLE + RAM",
                                        "MBC2 + BATTERY",
                                        "MBC5 + RUMBLE + RAM + BATTERY",
                                        "ROM + RAM",
                                        "MBC6",
                                        "ROM + RAM + BATTERY",
                                        "MBC7 + SENSOR + RUMBLE + RAM + BATTERY",
                                        "MMM01",
                                        "MMM01 + RAM",
                                        "MMM01 + RAM + BATTERY",
                                        "MBC3 + TIMER + BATTERY",
                                        "MBC3 + TIMER + RAM + BATTERY",
                                        "POCKET CAMERA",
                                        "MBC3",
                                        "BANDAI TAMA5",
                                        "MBC3 + RAM",
                                        "HuC3",
                                        "MBC3 + RAM + BATTERY",
                                        "HuC1 + RAM + BATTERY"
                                    ]
                                }
                            ]
                        },
                        "romSize": {
                            "description": "The header value to write for ROM size, a known ROM size, or 'auto' to determine value automatically. If omitted the ROM is left unchanged.",
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "auto",
                                        "32KB",
                                        "64KB",
                                        "128KB",
                                        "256KB",
                                        "512KB",
                                        "1MB",
                                        "2MB",
                                        "4MB",
                                        "8MB",
                                        "1.1MB",
                                        "1.2MB",
                                        "1.5MB"
                                    ]
                                }
                            ]
                        },
                        "ramSize": {
                            "description": "The header value to write for RAM size or a known RAM size. If omitted the ROM is left unchanged.",
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 255
                                },
                                {
                                    "type": "string",
                                    "enum": [
                                        "none",
                                        "2KB",
                                        "8KB",
                                        "32KB",
                                        "128KB",
                                        "64KB"
                                    ]
                                }
                            ]
                        },
                        "gameId": {
                            "description": "The four-character unique value to write for game id. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "maxLength": 4
                        },
                        "gameTitle": {
                            "description": "The eleven- or fifteen-character value to write for game title. If omitted the ROM is left unchanged.",
                            "type": "string",
                            "maxLength": 15
                        },
                        "gameVersion": {
                            "description": "The byte to write for game version number. If omitted the ROM is left unchanged.",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                        }
                    }
                }
            }
        },
        "formatter": {
            "description": "Settings for the formatting tool",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "settings": {
                    "description": "Settings for the formatter",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "useSpaces": {
                            "description": "Whether to use spaces instead of tabs to indent. If omitted, defaults to true.",
                            "type": "boolean"
                        },
                        "tabSize": {
                            "description": "The number of characters to indent. If omitted, defaults to 4.",
                            "type": "number"
                        },
                        "keywordCase": {
                            "description": "How keywords (INCLUDE, SECTION, IF, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "opcodeCase": {
                            "description": "How opcodes (LD, ADD, JMP, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "pseudoOpCase": {
                            "description": "How pseudo-opcodes (DS, DB, RW, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "conditionCodeCase": {
                            "description": "How condition codes (C, NC, Z, NZ) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "registerCase": {
                            "description": "How registers (A, B, HL, SP, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "functionCase": {
                            "description": "How functions (STRCAT, MUL, HIGH, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "regionCase": {
                            "description": "How memory regions (ROM0, WRAMX, HRAM, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        },
                        "hexLetterCase": {
                            "description": "How letters in hex number literals ($FFFF, $12E4, $D3, etc.) should be capitalized. If omitted, defaults to 'preserve'.",
                            "type": "string",
                            "enum": [
                                "uppercase",
                                "lowercase",
                                "preserve"
                            ]
                        }
                    }
                }
            }
        },
        "emulator": {
            "description": "Settings for the testing emulator",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "path": {
                    "description": "The path to the emulator executable.",
                    "type": "string"
                }
            }
        }
    }
}